import streamlit as st  
import yfinance as yf  
import pandas as pd  
import plotly.express as px  
from currency_converter import CurrencyConverter 
import math
import locale  

# Locale auf Deutsch setzen
locale.setlocale(locale.LC_TIME, "de_DE.utf8")  
# Setze das Locale f√ºr die deutsche Sprache und Zeitformate

# üìå Liste der bekanntesten Aktien
aktien_liste = {  
# Dictionary mit den bekannten Aktien und ihren Symbolen
    'Apple Inc.': 'apple_inc',
    'Microsoft Corporation': 'microsoft_corporation',
    'Alphabet Inc. (Google)': 'alphabet_inc_google',
    'Amazon.com Inc.': 'amazon_com_inc',
    'Tesla Inc.': 'tesla_inc',
    'Meta Platforms Inc. (Facebook)': 'meta_platforms_inc_facebook',
    'Nvidia Corporation': 'nvidia_corporation',
    'Berkshire Hathaway Inc.': 'berkshire_hathaway_inc',
    'JPMorgan Chase & Co.': 'jpmorgan_chase_co',
    'Visa Inc.': 'visa_inc',
    'Johnson & Johnson': 'johnson_johnson',
    'Walmart Inc.': 'walmart_inc',
    'Procter & Gamble Co.': 'procter_gamble_co',
    'UnitedHealth Group Incorporated': 'unitedhealth_group_incorporated',
    'The Home Depot Inc.': 'the_home_depot_inc',
    'Mastercard Incorporated': 'mastercard_incorporated',
    'The Walt Disney Company': 'the_walt_disney_company',
    'PayPal Holdings Inc.': 'paypal_holdings_inc',
    'Netflix Inc.': 'netflix_inc',
    'PepsiCo Inc.': 'pepsico_inc',
    'The Coca-Cola Company': 'the_coca_cola_company',
    'AbbVie Inc.': 'abbvie_inc',
    'Pfizer Inc.': 'pfizer_inc',
    'Moderna Inc.': 'moderna_inc',
    'Nike Inc.': 'nike_inc',
    'Costco Wholesale Corporation': 'costco_wholesale_corporation',
    'Intel Corporation': 'intel_corporation',
    'Advanced Micro Devices Inc.': 'advanced_micro_devices_inc',
    'Salesforce Inc.': 'salesforce_inc',
    'Adobe Inc.': 'adobe_inc',
    'AT&T Inc.': 'at_t_inc',
    'Exxon Mobil Corporation': 'exxon_mobil_corporation',
    'Chevron Corporation': 'chevron_corporation',
    'Alibaba Group Holding Limited': 'alibaba_group_holding_limited',
    'The Boeing Company': 'the_boeing_company',
    'General Electric Company': 'general_electric_company',
    'Cisco Systems Inc.': 'cisco_systems_inc',
    'International Business Machines Corporation': 'international_business_machines_corporation',
    'Oracle Corporation': 'oracle_corporation',
    'Uber Technologies Inc.': 'uber_technologies_inc',
    'Starbucks Corporation': 'starbucks_corporation',
    'McDonald‚Äôs Corporation': 'mcdonalds_corporation',
    'Verizon Communications Inc.': 'verizon_communications_inc',
    'Honeywell International Inc.': 'honeywell_international_inc',
    'Dow Inc.': 'dow_inc',
    'The Goldman Sachs Group Inc.': 'the_goldman_sachs_group_inc',
    'Morgan Stanley': 'morgan_stanley',
    'Amgen Inc.': 'amgen_inc',
    'Caterpillar Inc.': 'caterpillar_inc',
    'Taiwan Semiconductor Manufacturing Company Limited': 'taiwan_semiconductor_manufacturing_company_limited'
}

st.set_page_config(layout='wide')  
# Setze das Layout der Seite auf "wide"

# Sidebar-Men√º
st.sidebar.title('üìä Aktienanalyse-Tool')  
# Titel f√ºr das Sidebar-Men√º

option = st.sidebar.radio('W√§hle eine Option:', ['1. Einzelaktie Verlaufsdaten',
                                                    '2. Mehrfachvergleiche Close-Daten',
                                                    '3. Detail - Analysen'
                                                     ])  
# Radio-Button f√ºr Optionen in der Sidebar

st.sidebar.markdown("<br><br><br>", unsafe_allow_html=True)  
# Leerzeilen f√ºr visuelle Trennung

with st.container():  
# Erstelle einen Container f√ºr den Hauptinhalt

    if option == '1. Einzelaktie Verlaufsdaten':  
    # Option 1: Einzelaktie Verlaufsdaten

        st.header('üìà Aktienverl√§ufe ansehen')  
        # Titel f√ºr den Abschnitt

        aktie = st.selectbox('W√§hle eine Aktie', list(aktien_liste.keys()))  
        # Auswahlbox f√ºr Aktien

        symbol = aktien_liste[aktie]  
        # Hole das Symbol der ausgew√§hlten Aktie

        daten = pd.read_csv(f'csv_data/{aktien_liste[aktie]}.csv')  
        # Lade die CSV-Datei mit den historischen Daten der Aktie

        daten['date'] = pd.to_datetime((daten['date']))  
        # Konvertiere das Datumsformat in Datetime

        data_frame = daten.copy()  
        # Kopiere die Daten in ein neues DataFrame

        data_frame['date'] = pd.to_datetime(data_frame['date']).dt.date  
        # Extrahiere nur das Datum (ohne Uhrzeit)

        st.dataframe(data_frame, use_container_width=True)  
        # Zeige die Tabelle im Streamlit-Frontend an

        st.header('üìà Diagrammanalyse')  
        # Titel f√ºr den Diagramm-Analyse-Abschnitt

        col1, col2 = st.columns(2)  
        # Erstelle zwei Spalten f√ºr Eingabefelder

        with col1:
            jahr_von = st.number_input('Jahr von', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year[0], step=1)  
            # Eingabe f√ºr "Jahr von"
        
        with col2:
            jahr_bis = st.number_input('Jahr bis', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year.iloc[-1], step=1)  
            # Eingabe f√ºr "Jahr bis"
        
        jahr_von = pd.to_datetime(f"{jahr_von}-01-01")  
        # Setze das Startjahr als Datetime

        jahr_bis = pd.to_datetime(f"{jahr_bis}-12-31")  
        # Setze das Endjahr als Datetime

        daten_visual = daten[['date', 'close']]  
        # W√§hle nur die Spalten 'date' und 'close' f√ºr die Visualisierung

        daten_visual = daten_visual[daten_visual['date'] >= jahr_von][daten_visual['date'] <= jahr_bis]  
        # Filtere die Daten nach dem ausgew√§hlten Zeitraum

        fig = px.line(daten_visual, x='date', y='close', title=f'Aktienkurs von {aktie}')  
        # Erstelle ein Liniendiagramm

        fig.update_xaxes(title='Datum')  
        # Setze den Titel der x-Achse

        fig.update_yaxes(title='Kurs in USD')  
        # Setze den Titel der y-Achse

        st.plotly_chart(fig, use_container_width=True)  
        # Zeige das Diagramm im Streamlit-Frontend an


    elif option == '2. Mehrfachvergleiche Close-Daten':  
    # Option 2: Mehrfachvergleiche von Close-Daten

        st.header('üìà Aktienvergleiche der Close-Daten ansehen')  
        # Titel f√ºr den Abschnitt

        col1, col2, col3 = st.columns(3)  
        # Erstelle drei Spalten f√ºr die Auswahl der Aktien

        with col1:
            aktie1 = st.selectbox('W√§hle die 1. Aktie', list(aktien_liste.keys()))        
            # Auswahl der ersten Aktie
            
        with col2:
            aktie2 = st.selectbox('W√§hle die 2. Aktie', list(aktien_liste.keys()), index=None)        
            # Auswahl der zweiten Aktie
            
        with col3:
            aktie3 = st.selectbox('W√§hle die 3. Aktie', list(aktien_liste.keys()), index=None)  
            # Auswahl der dritten Aktie

        symbol = [aktie1, aktie2, aktie3]    
        # Erstelle eine Liste mit den ausgew√§hlten Aktien

        symbol = [i for i in symbol if i is not None]    
        # Entferne None-Werte aus der Liste

        symbol = list(set(symbol))  
        # Entferne doppelte Aktien aus der Liste

        daten = pd.read_csv(f'csv_data/all_stocks_closed.csv', index_col='date')  
        # Lade die CSV-Datei mit den Close-Daten aller Aktien

        daten.index = pd.to_datetime((daten.index))  
        # Konvertiere den Index (Datum) in Datetime

        daten = daten[symbol]  
        # Filtere die Daten f√ºr die ausgew√§hlten Aktien

        if len(symbol) > 1:  
        # Wenn mehr als eine Aktie ausgew√§hlt wurde

            checkbox_status = st.checkbox("Datumsfilter an j√ºngste Aktie anpassen")  
            # Checkbox f√ºr die Anpassung des Datumsfilters

            if checkbox_status:  
            # Wenn der Checkbox aktiviert wurde

                min = max(daten.isna().sum())  
                # Bestimme das Maximum der fehlenden Werte

                daten = daten.iloc[min:]  
                # Filtere die Daten basierend auf den fehlenden Werten

                data_frame = daten.copy()  
                # Kopiere die gefilterten Daten

                data_frame.index = data_frame.index.date  
                # Extrahiere nur das Datum (ohne Uhrzeit)

                st.dataframe(data_frame, use_container_width=True)  
                # Zeige die Tabelle im Streamlit-Frontend an

            else:  
            # Wenn der Checkbox nicht aktiviert wurde

                min = min(daten.isna().sum())  
                # Bestimme das Minimum der fehlenden Werte

                daten = daten.iloc[min:]  
                # Filtere die Daten basierend auf den fehlenden Werten

                data_frame = daten.copy()  
                # Kopiere die gefilterten Daten

                data_frame.index = data_frame.index.date  
                # Extrahiere nur das Datum (ohne Uhrzeit)

                st.dataframe(data_frame, use_container_width=True)  
                # Zeige die Tabelle im Streamlit-Frontend an

        else:  
        # Wenn nur eine Aktie ausgew√§hlt wurde

            min = min(daten.isna().sum())  
            # Bestimme das Minimum der fehlenden Werte

            daten = daten.iloc[min:]  
            # Filtere die Daten basierend auf den fehlenden Werten

            data_frame = daten.copy()  
            # Kopiere die gefilterten Daten

            data_frame.index = data_frame.index.date  
            # Extrahiere nur das Datum (ohne Uhrzeit)

            st.dataframe(data_frame, use_container_width=True)  
            # Zeige die Tabelle im Streamlit-Frontend an

        st.header('üìà Diagrammanalyse')  
        # Titel f√ºr den Diagramm-Analyse-Abschnitt

        col4, col5 = st.columns(2)  
        # Erstelle zwei Spalten f√ºr die Eingabefelder "Jahr von" und "Jahr bis"

        with col4:
            jahr_von = st.number_input('Jahr von', min_value=daten.index[0].year, max_value=daten.index[-1].year, value=daten.index[0].year, step=1)  
            # Eingabe f√ºr "Jahr von"
            
        with col5:
            jahr_bis = st.number_input('Jahr bis', min_value=daten.index[0].year, max_value=daten.index[-1].year, value=daten.index[-1].year, step=1)  
            # Eingabe f√ºr "Jahr bis"

        jahr_von = pd.to_datetime(f"{jahr_von}-01-01")  
        # Setze das Startjahr als Datetime

        jahr_bis = pd.to_datetime(f"{jahr_bis}-12-31")  
        # Setze das Endjahr als Datetime

        daten_visual = daten[(daten.index >= jahr_von) & (daten.index <= jahr_bis)]  
        # Filtere die Daten nach dem ausgew√§hlten Zeitraum

        fig = px.line(daten_visual, x=daten_visual.index, y=[i for i in daten_visual.columns], title=f'Aktienkurs von {'  vs.  '.join(symbol)}')  
        # Erstelle ein Liniendiagramm f√ºr die ausgew√§hlten Aktien

        fig.update_xaxes(title='Datum')  
        # Setze den Titel der x-Achse

        fig.update_yaxes(title='Kurs in USD')  
        # Setze den Titel der y-Achse

        st.plotly_chart(fig, use_container_width=True)  
        # Zeige das Diagramm im Streamlit-Frontend an

    
    elif option == '3. Detail - Analysen':  
    # Option 3: Detailanalysen

        st.sidebar.markdown(
            "<p style='font-size:20px;'>Detail w√§hlen:</p>",
            unsafe_allow_html=True
        )  
        # Sidebar-Titel f√ºr die Detailauswahl

        option2 = st.sidebar.radio('', ['Einzelauswahl'])  
        # Radio-Button f√ºr die Einzelauswahl der Analyseoption

        if option2 == 'Einzelauswahl':  
        # Wenn "Einzelauswahl" gew√§hlt wurde

            option3 = st.sidebar.radio('Analyseanzeige', ['B√∂rsenverlauf tabelarisch', 'Liniendiagramm', 'Details'])  
            # Radio-Button f√ºr die Auswahl des Anzeigemodus (tabelarisch, Liniendiagramm, Details)

            aktie = st.selectbox('W√§hle eine Aktie', list(aktien_liste.keys()))  
            # Auswahl einer Aktie aus der Liste

            symbol = aktien_liste[aktie]  
            # Hole das Symbol der ausgew√§hlten Aktie

            daten = pd.read_csv(f'csv_data/{aktien_liste[aktie]}.csv')  
            # Lade die CSV-Daten der ausgew√§hlten Aktie

            daten['date'] = pd.to_datetime((daten['date']))  
            # Konvertiere das 'date'-Feld in datetime

            data_frame = daten.copy()  
            # Kopiere die Daten f√ºr weitere Verwendungen

            data_frame['date'] = pd.to_datetime(data_frame['date']).dt.date  
            # Extrahiere nur das Datum (ohne Uhrzeit)

            if option3 == 'B√∂rsenverlauf tabelarisch':  
            # Wenn "B√∂rsenverlauf tabelarisch" gew√§hlt wurde

                col1, col2 = st.columns(2)  
                # Erstelle zwei Spalten f√ºr die Eingabefelder "Jahr von" und "Jahr bis"

                with col1:
                    jahr_von = st.number_input('Jahr von', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year[0], step=1)  
                    # Eingabe f√ºr "Jahr von"

                with col2:
                    jahr_bis = st.number_input('Jahr bis', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year.iloc[-1], step=1)  
                    # Eingabe f√ºr "Jahr bis"
            
                jahr_von = pd.to_datetime(f"{jahr_von}-01-01")  
                # Setze das Startjahr als Datetime

                jahr_bis = pd.to_datetime(f"{jahr_bis}-12-31")  
                # Setze das Endjahr als Datetime

                st.header('üìà B√∂rsenverlauf tabelarisch')  
                # Titel f√ºr den B√∂rsenverlauf in Tabellenform

                st.dataframe(data_frame[(daten['date'] >= jahr_von) & (daten['date'] <= jahr_bis)], use_container_width=True)  
                # Zeige die gefilterte Tabelle an

                st.markdown('### Deskriptive Tabelle')  
                # Titel f√ºr die deskriptive Tabelle

                stats = daten[(daten['date'] >= jahr_von) & (daten['date'] <= jahr_bis)].describe().drop(['date', 'dividends', 'stock splits'], axis=1)  
                # Berechne deskriptive Statistiken f√ºr den ausgew√§hlten Zeitraum

                st.dataframe(stats, use_container_width=True)  
                # Zeige die deskriptiven Statistiken an


            if option3 == 'Liniendiagramm':  
                # Wenn "Liniendiagramm" ausgew√§hlt wurde

                st.header('üìà Diagrammanalyse')  
                # Setze Header f√ºr die Diagrammanalyse

                col1, col2 = st.columns(2)  
                # Erstelle zwei Spalten f√ºr die Eingabefelder "Jahr von" und "Jahr bis"

                with col1:
                    jahr_von = st.number_input('Jahr von', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year[0], step=1)  
                    # Eingabe f√ºr "Jahr von"

                with col2:
                    jahr_bis = st.number_input('Jahr bis', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year.iloc[-1], step=1)  
                    # Eingabe f√ºr "Jahr bis"

                jahr_von = pd.to_datetime(f"{jahr_von}-01-01")  
                # Setze das Startjahr als Datetime

                jahr_bis = pd.to_datetime(f"{jahr_bis}-12-31")  
                # Setze das Endjahr als Datetime

                daten_visual = daten[['date', 'close']]  
                # W√§hle nur 'date' und 'close' aus den Daten

                daten_visual = daten_visual[(daten_visual['date'] >= jahr_von) & (daten_visual['date'] <= jahr_bis)]  
                # Filtere die Daten f√ºr den ausgew√§hlten Zeitraum

                # Plotly-Liniendiagramm erstellen
                fig = px.line(daten_visual, x='date', y='close', title=f'Aktienkurs von {aktie}')  
                # Erstelle das Liniendiagramm

                fig.update_xaxes(title='Datum')  
                # Setze den Titel der x-Achse

                fig.update_yaxes(title='Kurs in USD')  
                # Setze den Titel der y-Achse

                st.plotly_chart(fig, use_container_width=True)  
                # Zeige das Liniendiagramm an

                st.markdown('''

                    ''')  
                # Leere Markdown-Zeile f√ºr Abst√§nde

                voluntalitaet = daten_visual.copy()  
                # Kopiere die Daten f√ºr die Volatilit√§tsberechnung

                voluntalitaet['jahr'] = voluntalitaet['date'].astype(str).str[:4]  
                # Extrahiere das Jahr aus dem Datum

                voluntalitaet['returns'] = voluntalitaet['close'].pct_change()  
                # Berechne die t√§gliche Rendite (Prozent√§nderung des Schlusspreises)

                voluntalitaet = voluntalitaet.dropna()  
                # Entferne Zeilen mit NaN-Werten

                voluntalitaet = voluntalitaet.groupby('jahr')['returns'].std()  
                # Berechne die Standardabweichung der Renditen pro Jahr (Volatilit√§t)

                fig2 = px.line(voluntalitaet, x=voluntalitaet.index, y='returns', title='Volatilit√§t der Aktie')  
                # Erstelle das Liniendiagramm der Volatilit√§t

                fig2.update_xaxes(title='Jahr')  
                # Setze den Titel der x-Achse f√ºr das Volatilit√§tsdiagramm

                fig2.update_yaxes(title='Volatilit√§t')  
                # Setze den Titel der y-Achse f√ºr das Volatilit√§tsdiagramm

                st.plotly_chart(fig2, use_container_width=True)  
                # Zeige das Volatilit√§tsdiagramm an

            if option3 == 'Details':  
                # Wenn "Details" ausgew√§hlt wurde

                st.header(f'üìà {aktie} - B√∂rsenhistory und Werterechner')  
                # Setze Header f√ºr die B√∂rsenhistorie und den Werterechner

                st.markdown('''

                    ''')  
                # Leere Markdown-Zeile f√ºr Abst√§nde

                start_date = pd.to_datetime(daten['date'][0]).strftime("%d. %B %Y")  
                # Setze das Startdatum des B√∂rsengangs als Datetime-Objekt

                adj_open = daten['open'][0]  
                # Hole den adjustierten Er√∂ffnungspreis

                splits = [i for i in daten['stock splits'] if i != 0]  
                # Hole alle Aktien-Split-Werte, die nicht 0 sind

                split_back = math.prod(splits) * adj_open  
                # Berechne den angepassten Er√∂ffnungspreis unter Ber√ºcksichtigung der Splits

                col1, col2 = st.columns(2)  
                # Erstelle zwei Spalten f√ºr die Darstellung von Informationen

                with col1:
                    st.markdown(f'''
                    ### B√∂rsengang
                    {aktie} ging am {start_date} an die B√∂rse.

                    Gem√§√ü dem adjustierten Open-Wert von {adj_open:.2f}$ und unter R√ºckberechnung der Splits

                    entspricht dies einem damaligen Wert von ~ {split_back:.0f} US $.

                    Berechnung entsprechend: {' x '.join(str(i) for i in splits)} x {adj_open:.4f} = {split_back:.2f}
                                ''')  
                    # Zeige Informationen zum B√∂rsengang der Aktie und deren Berechnung

                with col2:
                    st.markdown('''

                    ''')  
                    # Leere Markdown-Zeile f√ºr Abst√§nde

                    splits_frame = daten[['date', 'stock splits']][daten['stock splits'] != 0]  
                    # Filtere die Split-Daten

                    splits_frame['date'] = pd.to_datetime(splits_frame['date']).dt.date  
                    # Konvertiere das Datum der Splits in das Datumsformat

                    st.dataframe(splits_frame)  
                    # Zeige die Dataframe mit den Splits an

                st.error("Da yfinance nicht immer korrekte historische Daten hat kann es hier zu Fehlern in der Datenlage kommen. Echtheit der Daten ist nicht garantiert !")  
                # Zeige eine Warnung bez√ºglich der Genauigkeit der historischen Daten

                st.markdown(f'''
                ### Zeitwert-Berechnung

                Hier geht es darum, zu ermitteln wie hoch mein Invest sich entwickelt h√§tte
                wenn ich in einem bestimmten Jahr investiert h√§tte.        

                Betrag: Ist der Wert in ‚Ç¨ den man investiert h√§tte.
                
                Startjahr: Ist das Jahr in dem man investiert h√§tte.
                ''')  
                # Hier wird eine Markdown-√úberschrift und eine Beschreibung f√ºr die Berechnung des Zeitwertes des Investments angezeigt

                col3, col4 = st.columns(2)  
                # Zwei Spalten werden f√ºr die Eingabe des Betrages und des Startjahrs erstellt

                with col3:
                    amount = st.number_input("Geben Sie einen Betrag ein:", min_value=1, value=1000, step=1000)  
                    # Benutzer gibt den Betrag in Euro ein, der investiert werden soll (Standardwert: 1000‚Ç¨)

                with col4:
                    jahr_von = st.number_input('Startjahr', min_value=daten['date'].dt.year[0], max_value=daten['date'].dt.year.iloc[-1], value=daten['date'].dt.year[0], step=1)  
                    # Benutzer gibt das Startjahr des Investments ein (Standardwert ist das erste Jahr der Daten)

                jahr_von = pd.to_datetime(f"{jahr_von}-01-01")  
                # Das Startjahr wird als Datetime-Objekt umgewandelt

                adj_aktien_wert_start = daten[daten['date'] >= jahr_von]['close'].iloc[0]  
                # Der Aktienwert zum Startzeitpunkt des Investments (adjustierter Wert) wird ermittelt

                aktien_wert_heute = data_frame[data_frame['date'] == data_frame['date'].iloc[-1]]['close']  
                # Der aktuelle Aktienwert (heute) wird ermittelt

                c = CurrencyConverter()  
                # Die W√§hrungsumrechnungsbibliothek wird initialisiert

                heutiger_umrechnungskurs = usd_to_eur_rate = c.convert(1, 'USD', 'EUR')  
                # Der aktuelle Umrechnungskurs von USD zu EUR wird ermittelt

                # Berechnungen der Werte f√ºr die Anzeige
                aktien_wert_berechnung = {
                    'Startzeitpunkt Investment': daten[daten['date'] >= jahr_von]['date'].iloc[0].strftime('%d. %B %Y'),  
                    # Startdatum des Investments

                    'Adj. Aktien Wert Startzeitpunk': f'{float(adj_aktien_wert_start):.2f} US $',  
                    # Der Aktienwert zum Startzeitpunkt (in USD)

                    'Letzter Aktien-Wert vom': data_frame['date'].iloc[-1].strftime('%d. %B %Y'),  
                    # Datum des letzten Aktienwertes

                    'Aktienwert heute': f'{float(aktien_wert_heute):.2f} US $',  
                    # Der heutige Aktienwert (in USD)

                    'Heutiger Umrechnugskurs $ zu ‚Ç¨' : f'{heutiger_umrechnungskurs:.4f}'  
                    # Der Umrechnungskurs von USD zu EUR (bis 4 Dezimalstellen)
                }

                wert_berechnung = c.convert(amount, 'EUR', 'USD')  
                # Der eingegebene Betrag in EUR wird in USD umgerechnet

                wert_berechnung = wert_berechnung / adj_aktien_wert_start  
                # Berechne die Anzahl der Aktien, die man mit dem angegebenen Betrag kaufen k√∂nnte, basierend auf dem Startwert

                wert_berechnung = wert_berechnung * aktien_wert_heute  
                # Berechne den aktuellen Wert dieser Aktien

                wert_berechnung = c.convert(wert_berechnung, 'USD', 'EUR')  
                # Der berechnete Aktienwert wird zur√ºck in EUR umgerechnet

                # Zeige die Berechnungen in den Spalten an
                col5, col6 = st.columns(2)  

                with col5:
                    st.markdown(f'''
                    H√§tte man am {daten[daten['date'] >= jahr_von]['date'].iloc[0].strftime('%d. %B %Y')}
                    f√ºr {amount:,.2f}‚Ç¨ in {aktie} investiert, h√§tte man heute wahrscheinlich einen Aktien-Wert 
                    von {wert_berechnung:,.2f}‚Ç¨.
                    ''')  
                    # Eine Zusammenfassung der Berechnung wird in der linken Spalte angezeigt

                with col6:
                    st.dataframe(aktien_wert_berechnung, use_container_width=True)  
                    # Zeige die detaillierten Berechnungsdaten in der rechten Spalte an

                # Visualisierung der Entwicklung der Investition im Zeitverlauf
                werte_berechnung_visual = daten.copy()  
                # Erstelle eine Kopie der Daten, um die Berechnung f√ºr den Zeitraum zu visualisieren

                werte_berechnung_visual = werte_berechnung_visual[werte_berechnung_visual['date'] >= jahr_von]  
                # Filtere die Daten nach dem Startjahr

                werte_berechnung_visual['date'] = pd.to_datetime(werte_berechnung_visual['date']).dt.year  
                # Extrahiere nur das Jahr aus dem Datum f√ºr die Visualisierung

                # Berechne den ersten und letzten Wert jedes Jahres
                first_year_werte = werte_berechnung_visual.groupby('date').agg({'close':'first'}).reset_index()  
                # Erster Wert des Jahres
                first_year_werte = first_year_werte['close'].to_list()  

                last_year_werte = werte_berechnung_visual.groupby('date').agg({'close':'last'}).reset_index()  
                # Letzter Wert des Jahres
                last_year_werte = last_year_werte['close'].to_list()

                # Erstelle ein Dictionary f√ºr die Visualisierung
                visual_data_frame = {
                    'Jahre': werte_berechnung_visual['date'].unique(),  
                    # Die Jahre f√ºr die x-Achse
                    'Wert': [],  
                    # Die berechneten Werte f√ºr die y-Achse
                }

                # Berechne die Werte f√ºr jedes Jahr und f√ºge sie zur Visualisierung hinzu
                for first, last in zip(first_year_werte, last_year_werte):
                    wert_berechnung = c.convert(amount, 'EUR', 'USD')  
                    # Umrechnung des Betrags in USD

                    wert_berechnung = wert_berechnung / first_year_werte[0]  
                    # Berechne den Anteil des Investments im ersten Jahr

                    wert_berechnung = wert_berechnung * last  
                    # Berechne den Wert im letzten Jahr

                    wert_berechnung = c.convert(wert_berechnung, 'USD', 'EUR')  
                    # Umrechung in EUR

                    visual_data_frame['Wert'].append(wert_berechnung)  
                    # F√ºge den berechneten Wert zur Liste hinzu

                # Erstelle ein Liniendiagramm, das den Verlauf der Investition im Zeitverlauf zeigt
                fig_werte = px.line(visual_data_frame, x='Jahre', y='Wert', title='Verlauf der Investition in ‚Ç¨ umgerechnet')  
                # Diagramm erstellen

                st.plotly_chart(fig_werte)  
                # Zeige das Diagramm an

                st.markdown('</div>', unsafe_allow_html=True)  
                # Schlie√üe die HTML-Div-Struktur (falls erforderlich)
